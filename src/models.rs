// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]
use diesel::{Identifiable, Selectable, Insertable, Queryable};
use chrono::NaiveDate;
use chrono::NaiveDateTime;
use chrono::NaiveTime;
use bigdecimal::BigDecimal;
use uuid::Uuid;
use chrono::DateTime;
use chrono::offset::Utc;
use serde::{Deserialize, Serialize};

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_prices)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Price {
    pub id: i32,
    pub name: String,
    pub price: f64,
    pub data: f64,
    pub duration: i32,
    pub currency: String,
    pub banner: Option<String>,
    pub base_price: Option<f64>,
    pub country: Option<String>,
    pub created_time: Option<DateTime<Utc>>,
    pub height: Option<i32>,
    pub order: i32,
    pub plan_type: Option<String>,
    pub updated_time: Option<DateTime<Utc>>,
    pub width: Option<i32>,
    pub additional_credit: Option<f64>,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable, Serialize, Deserialize)]
#[diesel(table_name = crate::schema::api_sim)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Sim {
    pub id: i32,
    pub sim_id: String,
    pub sim_number: String,
    pub sim_balance: Option<f64>,
    pub created_time: NaiveDateTime,
    pub expired_date: Option<NaiveDateTime>,
    pub subscriber_id: Option<i64>,
    pub sim_serial: Option<String>,
    pub status: Option<String>,
    pub hotel_id: Option<i32>,
    pub user_id: Option<i32>,
    pub last_topup: Option<BigDecimal>,
    pub base_sim_balance: Option<f64>,
    pub active: bool,
    pub last_active: Option<DateTime<Utc>>,
    pub esim: bool,
    pub provider: String,
    pub qr_code: Option<String>,
    pub sim_number_origin: Option<String>,
    pub fup_reset_date: Option<DateTime<Utc>>,
    pub sim_active_date: Option<DateTime<Utc>>,
    pub subscribed: bool,
    pub use_fup_code: bool,
    pub pin: Option<String>,
    pub sent_email: bool,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_simidmapper)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SimMapper {
    pub id: i32,
    pub imsi: String,
    pub iccid: String,
    pub hotel_id: Option<i32>,
    pub esim: bool,
    pub provider: String,
    pub qr_code: Option<String>,
    pub synced: bool,
    pub last_email: Option<String>,
    pub msisdn: Option<String>,
    pub active: bool,
    pub created: Option<DateTime<Utc>>,
    pub booking_id: Option<String>,
    pub updated: DateTime<Utc>,
    pub assigned: bool,
    pub joytel_pin: String,
    pub sale_partner_id: Option<i32>,
    pub sent_date: Option<DateTime<Utc>>,
}

#[derive(Selectable, Insertable, Queryable, Debug)]
#[diesel(table_name = crate::schema::api_simidmapper)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SimMapperInsert {
    pub imsi: String,
    pub iccid: String,
    pub esim: bool,
    pub provider: String,
    pub qr_code: Option<String>,
    pub synced: bool,
    pub last_email: Option<String>,
    pub msisdn: Option<String>,
    pub active: bool,
    pub booking_id: Option<String>,
    pub created: Option<DateTime<Utc>>,
    pub updated: DateTime<Utc>,
    pub assigned: bool,
    pub joytel_pin: String,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::api_simidmapper_products)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SimidmapperProduct {
    pub id: i32,
    pub simidmapper_id: i32,
    pub product_id: i32,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::email_message)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct EmailMessage {
    pub id: i32,
    pub subject: String,
    pub body: String,
    pub processed: DateTime<Utc>,
    pub read: Option<DateTime<Utc>>,
    pub done: bool,
    pub source: String,
    pub message_id: Option<String>,
    pub json: Option<serde_json::Value>,
    pub created: Option<DateTime<Utc>>,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::get_sim_rules)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct GetSimRule {
    pub id: i32,
    pub name: String,
    pub rule: String,
    pub value: String,
}


#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_fuppackage)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Fuppackage {
    pub id: i32,
    pub usage_type: String,
    pub code: String,
    pub sms_code: Option<String>,
    pub call_code: Option<String>,
    pub name: String,
    pub data_mb: i32,
    pub data_mb2: i32,
    pub throtle1: i32,
    pub throtle2: i32,
    pub fup_code: String,
    pub days: i32,
    pub per_day: bool,
    pub sim_rule: Option<String>,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_order)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Order {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub delivery_address: Option<String>,
    pub receiver_name: String,
    pub receiver_phone: String,
    pub sim_serial: Option<String>,
    pub coupon: Option<String>,
    pub customer_id: Option<i32>,
    pub status_id: String,
    pub stripe_token: Option<String>,
    pub receiver_email: Option<String>,
    pub esim: bool,
    pub product_id: Option<i32>,
    pub start_active_date: Option<DateTime<Utc>>,
    pub amount: BigDecimal,
    pub base_amount: BigDecimal,
    pub source: String,
    pub pricing_plan_id: Option<i32>,
    pub body: serde_json::Value,
    pub order_id: Option<String>,
    pub consummed: bool,
    pub sale_partner_id: Option<i32>,
    pub payment: serde_json::Value,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_package)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Package {
    pub id: i32,
    pub package_name: String,
    pub days: i32,
    pub package_code: String,
    pub provider: String,
    pub country: Option<String>,
    pub esim_code: String,
    pub per_day: bool,
    pub mcc: Option<String>,
    pub fup_id: Option<i32>,
    pub mb: i32,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_product)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Product {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub product_type: String,
    pub name: String,
    pub image: Option<String>,
    pub in_stock: i32,
    pub price: BigDecimal,
    pub tax: BigDecimal,
    pub days: i32,
    pub currency_id: Option<String>,
    pub package_id: Option<i32>,
    pub protect_code: Option<String>,
    pub active: bool,
    pub provider: String,
    pub special_type: String,
    pub additional_credit: BigDecimal,
    pub fup_reset_in: i32,
    pub is_free: bool,
    pub countries: Vec<Option<String>>,
    pub popular: bool,
    pub use_credit: bool,
    pub country: Option<String>,
    pub show_in_app: bool,
    pub offset_time: i32,
    pub buy_count: i32,
    pub internal_popular: bool,
    pub show_in_web: bool,
    pub option_in_web: bool,
    pub sku: String,
    pub description: Option<String>,
    pub mb: i32,
    pub web_active: bool,
    pub reviews: i32,
    pub delivery_cost: BigDecimal,
    pub fup_id: Option<i32>,
    pub per_day: bool,
    pub rule_id: Option<i32>,
    pub calculate_percent: f64,
    pub stars: f64,
    pub bonus_point: i32,
    pub region_package: bool,
    pub calculate_mb: i32,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_salepartner)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Salepartner {
    pub id: i32,
    pub message_id: Option<String>,
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub booking_id: String,
    pub name: Option<String>,
    pub email: Option<String>,
    pub phone_number: Option<String>,
    pub product: Option<String>,
    pub start_date: Option<DateTime<Utc>>,
    pub send: bool,
    pub country: Option<String>,
    pub source: Option<String>,
    pub esim: bool,
    pub sim_number: Option<String>,
    pub sent_date: Option<String>,
    pub address: Option<String>,
    pub package_id: Option<i32>,
    pub real_option: Option<String>,
    pub real_product: Option<String>,
    pub days: i32,
    pub gb: f64,
    pub email_message_id: Option<i32>,
    pub from_country: Option<String>,
    pub booking_date: Option<DateTime<Utc>>,
    pub quantity: i32,
    pub sent_sims: i32,
    pub active: bool,
    pub note: Option<String>,
    pub cart_id: Option<i32>,
    pub date_request: Option<DateTime<Utc>>,
    pub order_data: serde_json::Value,
    pub status: String,
    pub activated: bool,
    pub uid: Option<Uuid>,
    pub user_id: Option<i32>,
    pub buyer_country: Option<String>,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(value))]
#[diesel(table_name = crate::schema::shop_module_status)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Status {
    pub created: DateTime<Utc>,
    pub modified: DateTime<Utc>,
    pub value: String,
    pub label: String,
    pub default: bool,
    pub order_index: Option<i32>,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::shop_module_transaction)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Transaction {
    pub id: i32,
    pub created: DateTime<Utc>,
    pub amount: BigDecimal,
    pub detail: String,
    pub stripe_token: Option<String>,
    pub sim_serial: Option<String>,
    pub coupon: Option<String>,
    pub order_id: i32,
    pub user_id: Option<i32>,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(table_name = crate::schema::sim_package)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct SimPackage {
    pub id: i32,
    pub start_date: Option<DateTime<Utc>>,
    pub end_date: Option<DateTime<Utc>>,
    pub package_name: String,
    pub provider: String,
    pub used_percent: f64,
    pub product_id: Option<i32>,
    pub sim_id: i32,
    pub created: Option<DateTime<Utc>>,
    pub date_used: Option<DateTime<Utc>>,
    pub updated: Option<DateTime<Utc>>,
    pub expired: bool,
    pub serial_number: Option<String>,
    pub source: String,
    pub total: i32,
    pub used: i32,
    pub order_id: Option<String>,
    pub recharge_code: Option<String>,
    pub joytel_rsp_order_id: Option<String>,
    pub booking_id: Option<String>,
    pub sent: bool,
}

#[derive(Selectable, Insertable, Queryable, Debug, Identifiable)]
#[diesel(primary_key(request_id))]
#[diesel(table_name = crate::schema::zoho_email)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct ZohoEmail {
    pub email: String,
    pub request_id: String,
    pub booking_id: String,
    pub uid: String,
    pub created: DateTime<Utc>,
    pub updated: DateTime<Utc>,
}

